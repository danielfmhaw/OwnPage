name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  DB_PASS: geheim
  DB_NAME: fahrrad_db
  DB_USER: fahrrad_user
  DB_PORT: 5432
  DB_HOST: localhost
  test_type: postgres

jobs:
  frontend-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies for recording
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb ffmpeg x11-utils

      - name: Start screen recording
        run: |
          mkdir -p recordings
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "Waiting for Xvfb..."
          sleep 3
          nohup ffmpeg -y \
            -video_size 1920x1080 \
            -framerate 25 \
            -f x11grab -i :99.0 \
            -c:v libx264 \
            -preset ultrafast \
            -pix_fmt yuv420p \
            -movflags +faststart \
            recordings/test_run.mp4 > /dev/null 2>&1 &
          echo $! > ffmpeg_pid.txt

      - name: Start PostgreSQL container
        run: |
          docker run --name postgres-${{ env.test_type }} -d \
            -e POSTGRES_PASSWORD=${{ env.DB_PASS }} \
            -e POSTGRES_DB=${{ env.DB_NAME }} \
            -e POSTGRES_USER=${{ env.DB_USER }} \
            -p ${{ env.DB_PORT }}:5432 \
            postgres:15
          
          echo "Waiting for PostgreSQL..."
          until docker exec postgres-${{ env.test_type }} pg_isready --host=${{ env.DB_HOST }} --port=${{ env.DB_PORT }} --username=${{ env.DB_USER }}; do sleep 1; done
          echo "PostgreSQL is ready!"

      - name: Run all SQL scripts in alphabetical order
        run: |
          for file in backend/init/*.sql
          do
            echo "Running $file"
            docker exec -i postgres-${{ env.test_type }} psql -U ${{ env.DB_USER }} -d ${{ env.DB_NAME }} < $file
          done

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run Controller
        working-directory: ./controller
        run: |
          go mod tidy
          nohup go run main.go &

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install and start frontend
        working-directory: ./frontend
        run: |
          npm install
          nohup npm run dev &

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Maven Tests
        working-directory: ./frontend-testing
        env:
          DISPLAY: :99
        run: mvn test

      - name: Stop screen recording
        if: always()
        run: |
          if [ -f ffmpeg_pid.txt ]; then
            kill $(cat ffmpeg_pid.txt)
          fi

      - name: Upload test screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: frontend-testing/screenshots

      - name: Upload screen recording
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenrecording
          path: recordings/test_run.mp4
