name: CI Pipeline
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-run:
          - register
          - login
    steps:
      - uses: actions/checkout@v3

      - name: Start PostgreSQL and run migrations
        run: |
          docker compose -f .github/docker/docker-compose.yml up -d postgres
          docker compose -f .github/docker/docker-compose.yml run --rm flyway
          echo "Database setup complete!"

      - name: Install dependencies for recording
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb ffmpeg x11-utils

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Controller
        working-directory: ./controller
        run: |
          export DISABLE_EMAILS=true
          go mod tidy
          nohup go run main.go &

      - name: Install and start frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run build
          nohup npm run preview -- --port 5173 &

      - name: Prepare recording directory
        run: mkdir -p recordings

      - name: Start virtual display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3

      - name: Run Maven Tests for ${{ matrix.test-run }}
        working-directory: ./frontend-testing
        env:
          DISPLAY: :99
        run: mvn test -Dcucumber.feature.path=src/test/resources/features/${{ matrix.test-run }}.feature

      - name: Prepare test artifact directory
        if: always()
        run: |
          mkdir -p test-results/${{ matrix.test-run }}
          [ -f frontend-testing/recordings/test_run.mp4 ] && cp frontend-testing/recordings/test_run.mp4 test-results/${{ matrix.test-run }}/ || echo "No recording found for ${{ matrix.test-run }}"
          [ -d frontend-testing/screenshots/${{ matrix.test-run }} ] && cp -r frontend-testing/screenshots/${{ matrix.test-run }} test-results/${{ matrix.test-run }}/ || echo "No screenshots found for ${{ matrix.test-run }}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-run }}
          path: test-results/${{ matrix.test-run }}

      - name: Cleanup
        if: always()
        run: docker compose -f .github/docker/docker-compose.yml down -v